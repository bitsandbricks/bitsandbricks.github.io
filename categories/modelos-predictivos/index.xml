<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Modelos Predictivos on Bits &amp; Bricks</title>
    <link>/categories/modelos-predictivos/</link>
    <description>Recent content in Modelos Predictivos on Bits &amp; Bricks</description>
    <generator>Hugo -- gohugo.io</generator>
    <managingEditor>avazquez@gmail.com (H. Antonio Vazquez Brust)</managingEditor>
    <webMaster>avazquez@gmail.com (H. Antonio Vazquez Brust)</webMaster>
    <lastBuildDate>Tue, 27 Jun 2017 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="/categories/modelos-predictivos/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Predicción de demanda de servicios urbanos con open data &#43; Facebook Prophet</title>
      <link>/post/prediccion-de-demanda-de-servicios-urbanos-con-prophet/</link>
      <pubDate>Tue, 27 Jun 2017 00:00:00 +0000</pubDate>
      <author>avazquez@gmail.com (H. Antonio Vazquez Brust)</author>
      <guid>/post/prediccion-de-demanda-de-servicios-urbanos-con-prophet/</guid>
      <description>&lt;p&gt;De todos los datasets que publica el portal de Open Data de Buenos Aires, mi favorito es sin dudas el que contiene los reclamos registrados por el Sistema Único de Atención Ciudadana (SUACI). El SUACI, también llamado &lt;a href=&#34;https://gestioncolaborativa.buenosaires.gob.ar/prestaciones&#34;&gt;BA 147&lt;/a&gt;, equivale a lo que en otras latitudes se conoce como &lt;a href=&#34;https://en.wikipedia.org/wiki/3-1-1&#34;&gt;servicio 311&lt;/a&gt;. El 311 es el número telefónico, complementado por un servicio web y en general una app también, al que los ciudadanos recurren para realizar reclamos al gobierno de la ciudad. En contraste con el servicio 911, el 311 (o 147 en Buenos Aires) se utiliza para reportar problemas que no involucran urgencias de salud o seguridad. Por ejemplo, si la cuadra de uno aparece llena de basura después de un evento multitudinario en las cercanías, se llama al 147 o se usa la app para que la ciudad envíe una cuadrilla de limpieza. En cambio, si una persona sufre un infarto en la vía pública, se llama al 911.&lt;/p&gt;
&lt;p&gt;Si esto les resulta un poco confuso, no se preocupen, nos es culpa nuestra; hay un ligero exceso de nombres distintos para cosas similares. Los nombres SUACI y BA 147 coexisten porque -creo- SUACI registra las solicitudes al 147 pero también reclamos enviados a la ciudad por otros medios. En cuanto a 311 vs. 147, la popularidad de 311 como número para reclamos aún muy lejos del archifamoso 911. Por eso muchas ciudades en el mundo, BA incluida, coinciden en usar el 911 para emergencias pero varían en el número reservado para reclamos cotidianos.&lt;/p&gt;
&lt;p&gt;Lo interesante de los servicios tipo 311 es que, cuando sus registros se comparten con el público, permiten hacer estudios sobre muchas facetas de la ciudad. Por ejemplo, &lt;a href=&#34;http://blog.datalook.io/using-data-analytics-to-make-bad-buildings-better-in-new-york-city/&#34;&gt;identificar edificios peligrosos por su deterioro&lt;/a&gt;, o probar que las “fronteras” entre comunidades distintas dentro de la ciudad &lt;a href=&#34;https://nextcity.org/daily/entry/311-calls-neighborhood-study&#34;&gt;generan más reclamos que áreas homogéneas&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Un área que creo de particular interés es la de predecir demanda a futuro de servicios urbanos, para ayudar a planificar la asignación de los siempre limitados recursos públicos. Analizando la cantidad de reclamos que la población realiza a lo largo del tiempo, podemos detectar tendencias y pronosticar demanda futura, así como predecir los momentos y lugares de “tranquilidad” (que requieren menos recursos) así como aquellos que generan picos (donde se van a necesitar refuerzos).&lt;/p&gt;
&lt;p&gt;A todo ésto, el área de I+D de Facebook liberó recientemente sus algoritmos de modelado y predicción para datos seriados en el tiempo, bajo el nombre de &lt;a href=&#34;https://facebookincubator.github.io/prophet/&#34;&gt;Prophet&lt;/a&gt;. La razón por la cual Prophet me resultó llamativo de inmediato es que hace muy fácil incorporar el efecto de días atípicos en un modelo predictivo para procesos que se desarrollan a lo largo del tiempo. En palabras de urbanista: podemos pronosticar la demanda de servicios urbanos usando registros históricos, generando un modelo que toma en cuenta el efecto de los diversos días feriados.&lt;/p&gt;
&lt;p&gt;Allá vamos!&lt;/p&gt;
&lt;div id=&#34;obteniendo-los-datos-de-la-ciudad&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Obteniendo los datos de la ciudad&lt;/h2&gt;
&lt;p&gt;El primer paso es descargar los datos que necesitamos. Visitamos &lt;a href=&#34;https://data.buenosaires.gob.ar/&#34;&gt;Buenos Aires Data&lt;/a&gt;, buscamos “Sistema Único de Atención Ciudadana”, y llegamos a la página de descarga que nos interesa - &lt;a href=&#34;https://data.buenosaires.gob.ar/dataset/sistema-unico-de-atencion-ciudadana&#34;&gt;aquí&lt;/a&gt;. Tenemos disponible un link para descargar un archivo comprimido que contiene los datos que buscamos. Podemos dejar que R se encargue de acceder al sitio, descargar y descomprimir por nosotros:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Donde vive nuestra data?
url &amp;lt;- &amp;quot;https://data.buenosaires.gob.ar/api/datasets/rJg_9jlR5/download&amp;quot;

# Donde queremos guardarla
destino &amp;lt;- &amp;#39;/home/havb/data/gcba/suaci&amp;#39;

# Creamos un archivo temporal para dscargar el zip con todos los datasets
temp &amp;lt;- tempfile()

# Descargamos -puede tomar unos cuantos minutos
download.file(url, temp)

# Des-zipeamos
unzip(temp, exdir = destino, junkpaths = TRUE)

# Eliminamos el archivo temporal
unlink(temp)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Terminado el trámite, revisamos nuestro botín:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;list.files(destino)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;sistema-unico-de-atencion-ciudadana-2011.csv&amp;quot;
## [2] &amp;quot;sistema-unico-de-atencion-ciudadana-2012.csv&amp;quot;
## [3] &amp;quot;sistema-unico-de-atencion-ciudadana-2013.csv&amp;quot;
## [4] &amp;quot;sistema-unico-de-atencion-ciudadana-2014.csv&amp;quot;
## [5] &amp;quot;sistema-unico-de-atencion-ciudadana-2015.csv&amp;quot;
## [6] &amp;quot;sistema-unico-de-atencion-ciudadana-2016.csv&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;He aquí el primer problema. En lugar de darnos un dataset con todo el historial de registros, nos dan una pila archivos que contienen la data separada por año. Cuando uno analiza datos a lo largo del tiempo, lo natural es tenerlos todos juntos, y luego segmentarlos -por año, por mes, o por otro período arbitrario- cuando es necesario. Y desde ya que cuando uno analiza tendencias para predecir, como estamos haciendo ahora, necesita todos los datos juntos. En fin, no es tan grave… solo es cuestión de pegar los datasets uno después del otro.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)
library(lubridate)

# Obtener la lista de archivos .csv que descargamos 

archivos &amp;lt;- list.files(path = destino, pattern = &amp;quot;\\.csv&amp;quot;, full.names = TRUE)

# A procesar!

suaci &amp;lt;-  archivos %&amp;gt;% 
  # leer cada archivo, guardar el resultado en un sólo dataframe
  map_df(read_csv2) %&amp;gt;% 
  # determinar la fecha a partir unieendo los campos FECHA_INGRESO, HORA_INGRESO, 
  # interpretando el resultado en formato &amp;quot;día/mes/año hora:min:sec [AM|PM]&amp;quot; 
  mutate(fecha = parse_date_time(paste(FECHA_INGRESO, HORA_INGRESO), &amp;quot;d/m/Y IMS p&amp;quot;, tz = &amp;quot;America/Argentina/Buenos_Aires&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ahora, exploremos los datos unificados. Rapidito, un top ten de los reclamos más frecuentes:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;suaci %&amp;gt;% 
  group_by(CONCEPTO, RUBRO) %&amp;gt;% 
  summarise(total = n()) %&amp;gt;% 
  arrange(desc(total)) %&amp;gt;%
  head(10)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 10 x 3
## # Groups:   CONCEPTO [10]
##    CONCEPTO                                           RUBRO          total
##    &amp;lt;chr&amp;gt;                                              &amp;lt;chr&amp;gt;          &amp;lt;int&amp;gt;
##  1 SOLICITUD DE PARTIDAS                              REGISTRO CIV… 818151
##  2 SOLICITUD DE PAGO VOLUNTARIO DE INFRACCIONES       TRANSPORTE Y… 358298
##  3 PERSONAS SIN TECHO EVALUACION                      ATENCION SOC… 138741
##  4 LUMINARIAS APAGADAS                                ALUMBRADO     115234
##  5 SOLICITUD DE RETIRO DE RESIDUOS VOLUMINOSOS        SANEAMIENTO …  86978
##  6 SOLICITUD DE RETIRO DE RESTOS DE OBRAS O DEMOLICI… SANEAMIENTO …  81570
##  7 RETIRO DE ESCOMBROS (RESIDUOS ARIDOS)              SANEAMIENTO …  75983
##  8 LUMINARIA: APAGADA                                 ALUMBRADO      63788
##  9 VEHICULOS ABANDONADOS EN VIA PUBLICA LEY 342       TRANSPORTE Y…  47773
## 10 SOLICITUD DE REPOSICION O CAMBIO DE UBICACION DE … SANEAMIENTO …  47709&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Hay algunos problemas. Categorías como “LUMINARIAS APAGADAS” y “LUMINARIA: APAGADA” son obvias referencias al mismo reclamo, registradas bajo categorías distintas. Podemos dejarlo pasar, porque no afecta a nuestros fines.&lt;/p&gt;
&lt;p&gt;Lo que vamos a modelar son las solicitudes al departamento de saneamiento urbano: reclamos de la ciudadanía para que la ciudad retire residuos voluminosos, escombros de obra, ramas podadas, etc. Aquí vale la pena insistir en la riqueza del dataset. Entre las categorías que aparecen con solo mirar las principales, aparecen la atención a personas sin techo, y los problemas de iluminación pública. Hay, tantas, tantas cosas que se pueden hacer mediante el análisis espacial y temporal de la data!&lt;/p&gt;
&lt;p&gt;Aislamos los reclamos que nos interesan en este momento:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;solicitudes_saneamiento &amp;lt;- suaci %&amp;gt;%
  filter(grepl(&amp;quot;RESIDUOS|RESTOS|ESCOMBROS &amp;quot;, CONCEPTO) == TRUE &amp;amp; 
           RUBRO == &amp;quot;SANEAMIENTO URBANO&amp;quot;) %&amp;gt;% 
  group_by(dia = format(fecha, &amp;quot;%Y-%m-%d&amp;quot;)) %&amp;gt;% 
  summarise(total = n())&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Y ahora los graficamos para ver que pinta tienen:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(hrbrthemes)

ggplot(solicitudes_saneamiento, aes(as.Date(dia), total)) + 
  geom_line(color = &amp;quot;orange&amp;quot;) +
  scale_x_date(date_labels = &amp;quot;%Y-%m&amp;quot;) +
  theme_ipsum() +
  labs(y = &amp;quot;solicitudes&amp;quot;, x = &amp;quot;fecha&amp;quot;,
       title=&amp;quot;Demanda diaria de servicios de saneamiento urbano&amp;quot;,
       subtitle = &amp;quot;Ciudad de Buenos Aires: 2011 - 2016&amp;quot;,
       caption = &amp;quot;Fuente: https://data.buenosaires.gob.ar/&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2017-06-27-prediccion-de-demanda-de-servicios-urbanos-con-prophet_files/figure-html/unnamed-chunk-7-1.png&#34; width=&#34;720&#34; /&gt;&lt;/p&gt;
&lt;p&gt;A primera vista, es obvio que los datos están sesgados, ya que la explosión en el número de solicitudes a partir de mediados del 2012 es atribuible a la forma en que la ciudad empezó a tomar nota de los reclamos, más que a un furor ciudadano por solicitar limpieza. Cuando hagamos nuestro modelo, vamos a descartar los registros de 2011 y 2012 porque tenemos claro que no son representativos.&lt;/p&gt;
&lt;p&gt;El siguiente ingrediente que necesitamos es una lista de los feriados públicos en la Argentina durante el período analizado.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;cuando-los-datos-estan-dispersos-la-hora-del-scraping&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Cuando los datos están dispersos: la hora del scraping&lt;/h2&gt;
&lt;p&gt;Buscar una lista oficial de feriados resultó en frustración. Si bien el gobierno nacional publica una lista de los &lt;a href=&#34;https://www.argentina.gob.ar/feriados&#34;&gt;feriados vigentes para el año en curso&lt;/a&gt;, no existe un archivo para descargar con las fechas exactas de los feriados en años anteriores.&lt;/p&gt;
&lt;p&gt;En los sitios web de varios diarios locales encontramos un historial de feriados, pero dispersos en distintas páginas web, y sin opción para descargarlos en un archivo de texto. Vamos a tener que “scrapear” la data. Cómo nos hacen laburar, che. Si tan solo alguien nos diera una API para toda información de consulta permanente, no tendríamos que hacer estas cosas!&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;/post/img/API.png&#34; alt=&#34;ira&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;ira&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Nuestro proveedor de fechas de feriados será La Nación, que publica un bonito &lt;a href=&#34;http://servicios.lanacion.com.ar/feriados/&#34;&gt;calendario de feriados oficiales&lt;/a&gt;, con la posibilidad de consultar los de años anteriores.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(rvest)

# Una función que hace scraping de todos los feriados publicados en lanacion.com.ar para un año dado

scrape_feriados_del_anio &amp;lt;- function(year) {
  
  # Donde está la data de los feriados
  baseurl &amp;lt;- &amp;quot;http://servicios.lanacion.com.ar/feriados/&amp;quot;
  
  get_feriados_mes &amp;lt;- function(month, feriados_page) {
    
    # Los feriados aparecen en dos categorías: &amp;quot;inamovible&amp;quot; y &amp;quot;trasladable&amp;quot;
    
    inamovibles &amp;lt;- feriados_page %&amp;gt;%
      map(html_nodes, &amp;quot;li.inamovible&amp;quot;) %&amp;gt;%
      map(html_text) %&amp;gt;%
      .[[month]] %&amp;gt;%
      {if (!is_empty(.)) paste(year, month, ., sep = &amp;quot;/&amp;quot;)}
  
    trasladables  &amp;lt;- feriados_page %&amp;gt;%
      map(html_nodes, &amp;quot;li.trasladable&amp;quot;) %&amp;gt;%
      map(html_text) %&amp;gt;% 
      .[[month]] %&amp;gt;%
      {if (!is_empty(.)) paste(year, month, ., sep = &amp;quot;/&amp;quot;)}
    
    todos &amp;lt;- c(inamovibles, trasladables) 
    
    if (!is.null(todos)) return(todos)
    
    }
  
  feriados_page &amp;lt;- read_html(paste0(baseurl, year)) %&amp;gt;% 
    html_nodes(&amp;quot;.bloque&amp;quot;)
  
  feriados_del_anio &amp;lt;- map(1:12, get_feriados_mes, feriados_page) %&amp;gt;% 
    unlist()
  
  return(feriados_del_anio)
}
  

# Descargamos los feriados de 2011 a 2016,  
feriados_2013_2016 &amp;lt;- map(2013:2016, scrape_feriados_del_anio) %&amp;gt;% 
  #los unimos en un unico vector
  unlist %&amp;gt;% 
  # los definimos como fecha
  ymd %&amp;gt;% 
  # Los ordenamos cronológicamente (necesario porque el scraper los trae como texto 
  # en orden alfabetico)
  sort&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Tenemos nuestra lista de feriados?&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;feriados_2013_2016&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1] &amp;quot;2013-01-01&amp;quot; &amp;quot;2013-01-31&amp;quot; &amp;quot;2013-02-11&amp;quot; &amp;quot;2013-02-12&amp;quot; &amp;quot;2013-02-20&amp;quot;
##  [6] &amp;quot;2013-03-24&amp;quot; &amp;quot;2013-03-29&amp;quot; &amp;quot;2013-04-01&amp;quot; &amp;quot;2013-04-02&amp;quot; &amp;quot;2013-05-01&amp;quot;
## [11] &amp;quot;2013-05-25&amp;quot; &amp;quot;2013-06-20&amp;quot; &amp;quot;2013-06-21&amp;quot; &amp;quot;2013-07-09&amp;quot; &amp;quot;2013-08-19&amp;quot;
## [16] &amp;quot;2013-10-14&amp;quot; &amp;quot;2013-11-25&amp;quot; &amp;quot;2013-12-08&amp;quot; &amp;quot;2013-12-25&amp;quot; &amp;quot;2014-01-01&amp;quot;
## [21] &amp;quot;2014-03-03&amp;quot; &amp;quot;2014-03-04&amp;quot; &amp;quot;2014-03-24&amp;quot; &amp;quot;2014-04-02&amp;quot; &amp;quot;2014-04-18&amp;quot;
## [26] &amp;quot;2014-05-01&amp;quot; &amp;quot;2014-05-02&amp;quot; &amp;quot;2014-05-25&amp;quot; &amp;quot;2014-06-20&amp;quot; &amp;quot;2014-07-09&amp;quot;
## [31] &amp;quot;2014-08-18&amp;quot; &amp;quot;2014-10-13&amp;quot; &amp;quot;2014-11-24&amp;quot; &amp;quot;2014-12-08&amp;quot; &amp;quot;2014-12-25&amp;quot;
## [36] &amp;quot;2014-12-26&amp;quot; &amp;quot;2015-01-01&amp;quot; &amp;quot;2015-02-16&amp;quot; &amp;quot;2015-02-17&amp;quot; &amp;quot;2015-03-23&amp;quot;
## [41] &amp;quot;2015-03-24&amp;quot; &amp;quot;2015-04-02&amp;quot; &amp;quot;2015-04-03&amp;quot; &amp;quot;2015-05-01&amp;quot; &amp;quot;2015-05-25&amp;quot;
## [46] &amp;quot;2015-06-20&amp;quot; &amp;quot;2015-07-09&amp;quot; &amp;quot;2015-08-17&amp;quot; &amp;quot;2015-10-12&amp;quot; &amp;quot;2015-11-27&amp;quot;
## [51] &amp;quot;2015-12-07&amp;quot; &amp;quot;2015-12-08&amp;quot; &amp;quot;2015-12-25&amp;quot; &amp;quot;2016-01-01&amp;quot; &amp;quot;2016-02-08&amp;quot;
## [56] &amp;quot;2016-02-09&amp;quot; &amp;quot;2016-03-24&amp;quot; &amp;quot;2016-03-25&amp;quot; &amp;quot;2016-04-02&amp;quot; &amp;quot;2016-05-01&amp;quot;
## [61] &amp;quot;2016-05-25&amp;quot; &amp;quot;2016-06-17&amp;quot; &amp;quot;2016-06-20&amp;quot; &amp;quot;2016-07-08&amp;quot; &amp;quot;2016-07-09&amp;quot;
## [66] &amp;quot;2016-08-15&amp;quot; &amp;quot;2016-10-10&amp;quot; &amp;quot;2016-11-28&amp;quot; &amp;quot;2016-12-08&amp;quot; &amp;quot;2016-12-09&amp;quot;
## [71] &amp;quot;2016-12-25&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Oh si.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;modelando-y-prediciendo&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Modelando y prediciendo&lt;/h2&gt;
&lt;p&gt;Con todos los ingredientes a mano, es hora de hacer vaticinios. Como suele pasar cuando uno trabaja con datos, hacer el modelo es la parte más sencilla… la mayor parte del tiempo la empleamos en reunir y limpiar los datos!&lt;/p&gt;
&lt;p&gt;Creamos un modelo:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(prophet)

modelo &amp;lt;- solicitudes_saneamiento %&amp;gt;% 
  filter(year(as.Date(dia)) &amp;gt; 2012) %&amp;gt;% 
  transmute(ds = as.Date(dia), y = total) %&amp;gt;%  
  prophet(holidays = data.frame(holiday = &amp;quot;feriado&amp;quot;, ds = feriados_2013_2016))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Initial log joint probability = -116.558
## Optimization terminated normally: 
##   Convergence detected: relative gradient magnitude is below tolerance&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Y predecimos la demanda para el año siguiente (todo el 2017):&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;forecast &amp;lt;- predict(modelo, make_future_dataframe(modelo, periods = 365))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;De paso, hacemos dos preguntas rápidas. Cuantas solicitudes diarias recibe la ciudad, y que efecto tiene un día feriado en el nivel de demanda?&lt;/p&gt;
&lt;p&gt;Durante el período 2013-2016, el área de saneamiento urbano de la ciudad recibió un promedio de 394 reclamos diarios, con un máximo 1075. El día en el que menos reclamos se registraron sólo hubo 3.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;modelo$history$y %&amp;gt;% summary&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
##     3.0   121.0   392.0   394.1   603.5  1075.0&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Según nuestro modelo, el efecto de que un feriado caiga en un día particular del mes es una reducción de 401 reclamos. En un día típico, esto haría que prácticamente no haya reclamos.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;forecast %&amp;gt;% 
  select(ds, feriado) %&amp;gt;% 
  filter(abs(feriado) &amp;gt; 0) %&amp;gt;% 
  head()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##           ds   feriado
## 1 2013-01-01 -401.1635
## 2 2013-01-31 -401.1635
## 3 2013-02-11 -401.1635
## 4 2013-02-12 -401.1635
## 5 2013-02-20 -401.1635
## 6 2013-03-24 -401.1635&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Visualizando por separado la tendencias general y las periódicas (por día de la semana y día del mes) notamos varios efectos.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;La tendencia general fue una baja del nivel de demanda desde el 2014 hasta el 2016, revertida luego. Se evidencia una fuerte suba de allí en más. Valdría la pena discernir si esto se debe a que la data sub-representa los reclamos del 2014-2016, o si efectivamente ocurrió una baja de demanda en esos años. Si ésto último fuera el caso, a que podría deberse?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;El día de mayor actividad es el Lunes, a continuación de los días más tranquilo, los del fin de semana. Está claro que en Domingo la gente no reclama mucho, pero al día siguiente si. En el resto de los días la demanda es pareja&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Tal como habíamos comprobado revisando los números, los días feriados generan una caída de unos 400 reclamos&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Los meses de mayor actividad son los de la segunda mitad del año. Durante las vacaciones de invierno se observa una baja de la demanda, leve en comparación a la de fin de año…. a partir de mediados de Diciembre, la demanda cae en picada, y se mantiene mínima en Enero.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;prophet_plot_components(modelo, forecast) &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2017-06-27-prediccion-de-demanda-de-servicios-urbanos-con-prophet_files/figure-html/unnamed-chunk-14-1.png&#34; width=&#34;720&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Y por último, trazamos la predicción de nivel de demanda para lo que queda del año:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plot(modelo, forecast) + theme_ipsum() +
  labs(y = &amp;quot;solicitudes&amp;quot;, x = &amp;quot;fecha&amp;quot;,
       title=&amp;quot;Pronóstico: demanda diaria de servicios de saneamiento urbano&amp;quot;,
       subtitle = &amp;quot;Ciudad de Buenos Aires: 2013 - 2016, extendido a final del 2017&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2017-06-27-prediccion-de-demanda-de-servicios-urbanos-con-prophet_files/figure-html/unnamed-chunk-15-1.png&#34; width=&#34;720&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Yo diría que, a no ser que esté operando con capacidad de sobra, Saneamiento Urbano va a necesitar más recursos!&lt;/p&gt;
&lt;p&gt;Para la próxima: hacer análisis espacial además del temporal.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
